// ------------------------------------------------------
// Prisma Schema — Marketplace estilo Mercado Libre (tincho)
// DB: PostgreSQL
// ------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- Enums ---------------------------
enum UserRole {
  BUYER
  SELLER
  ADMIN
  SUPPORT
}

enum DocType {
  DNI
  CUIT
  CUIL
  PASSPORT
}

enum CurrencyCode {
  ARS
  BRL
  CLP
  COP
  MXN
  PEN
  USD
  EUR
}

enum OrderStatus {
  PENDING
  PAID
  READY_TO_SHIP
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  REJECTED
  REFUNDED
  CHARGEBACK
}

enum ShipStatus {
  PENDING
  LABEL_CREATED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  LOST
}

enum Condition {
  NEW
  USED
  REFURBISHED
}

enum Channel {
  WEB
  MOBILE
  API
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ReturnStatus {
  NONE
  REQUESTED
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
}

// -------------------- Utilidades ----------------------
model Country {
  id             String          @id @default(uuid()) @db.Uuid
  iso2           String          @unique @db.Char(2)
  name           String
  currencies     CurrencyCode[]  // enum array (PostgreSQL)
  states         State[]
  sellerProfiles SellerProfile[]
  stores         Store[]
  products       Product[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model State {
  id        String   @id @default(uuid()) @db.Uuid
  countryId String   @db.Uuid
  code      String
  name      String
  cities    City[]
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())     // añadido para trazabilidad
  updatedAt DateTime @updatedAt          // añadido para trazabilidad
  @@index([countryId, code])
}

model City {
  id        String    @id @default(uuid()) @db.Uuid
  stateId   String    @db.Uuid
  name      String
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  addresses Address[]
  createdAt DateTime  @default(now())     // añadido para trazabilidad
  updatedAt DateTime  @updatedAt          // añadido para trazabilidad
  @@index([stateId, name])
}

// -------------------- Usuarios ------------------------
model User {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  phone        String?
  passwordHash String
  firstName    String
  lastName     String
  docType      DocType?
  docNumber    String?
  role         UserRole       @default(BUYER)
  seller       SellerProfile?
  buyer        BuyerProfile?
  addresses    Address[]
  favorites    Favorite[]
  carts        Cart[]
  questions    Question[]
  answers      Answer[]
  reviews      Review[]
  orders       Order[]        @relation("OrderBuyer")
  createdAt    DateTime       @default(now())   // añadido para auditoría
  updatedAt    DateTime       @updatedAt
  @@index([role])
}

model Address {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @db.Uuid
  label          String?
  type           AddressType @default(SHIPPING)
  street         String
  number         String?
  zipcode        String?
  reference      String?
  cityId         String?     @db.Uuid
  city           City?       @relation(fields: [cityId], references: [id])
  latitude       Decimal?    @db.Decimal(9,6)
  longitude      Decimal?    @db.Decimal(9,6)
  isDefault      Boolean     @default(false)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingFrom   Shipment[]  @relation("ShipFrom")
  shippingTo     Shipment[]  @relation("ShipTo")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@index([userId, type, isDefault])
}

model SellerProfile {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @unique @db.Uuid
  nickname    String    @unique
  description String?
  ratingAvg   Decimal   @default(0) @db.Decimal(3,2)
  ratingCount Int       @default(0)
  verified    Boolean   @default(false)
  countryId   String?   @db.Uuid
  country     Country?  @relation(fields: [countryId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stores      Store[]
  followers   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BuyerProfile {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @unique @db.Uuid
  preferences Json?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// -------------------- Catálogo ------------------------
model Brand {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([name])
}

model Category {
  id         String     @id @default(uuid()) @db.Uuid
  name       String
  slug       String     @unique
  parentId   String?    @db.Uuid
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  products   Product[]
  attributes Json?      // esquema de atributos (filtros)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@index([parentId])
}

model Store {
  id          String         @id @default(uuid()) @db.Uuid
  sellerId    String         @db.Uuid
  name        String
  slug        String         @unique
  description String?
  countryId   String?        @db.Uuid
  country     Country?       @relation(fields: [countryId], references: [id])
  seller      SellerProfile  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  products    Product[]
  orders      Order[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  @@index([sellerId])
}

model Product {
  id           String        @id @default(uuid()) @db.Uuid
  storeId      String        @db.Uuid
  brandId      String?       @db.Uuid
  categoryId   String        @db.Uuid
  title        String
  slug         String        @unique
  description  String?
  condition    Condition     @default(NEW)
  attributes   Json?
  images       ProductImage[]
  variations   Sku[]
  questions    Question[]
  reviews      Review[]
  favorites    Favorite[]
  orderItems   OrderItem[]
  ratingAvg    Decimal       @default(0) @db.Decimal(3,2)
  ratingCount  Int           @default(0)
  soldCount    Int           @default(0)
  active       Boolean       @default(true)
  countryId    String?       @db.Uuid
  country      Country?      @relation(fields: [countryId], references: [id])
  store        Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  brand        Brand?        @relation(fields: [brandId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  @@index([storeId, categoryId, active])
  @@index([brandId])
}

model ProductImage {
  id         String   @id @default(uuid()) @db.Uuid
  productId  String   @db.Uuid
  url        String
  alt        String?
  position   Int      @default(0)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@index([productId, position])
}

// Variante granular vendible (SKU)
model Sku {
  id             String         @id @default(uuid()) @db.Uuid
  productId      String         @db.Uuid
  code           String?        @unique
  variantValues  Json?          // { color: "negro", talle: "M" }
  priceAmount    Decimal        @db.Decimal(12,2)
  priceCurrency  CurrencyCode
  listPrice      Decimal?       @db.Decimal(12,2)
  stock          Int            @default(0)
  gtin           String?
  active         Boolean        @default(true)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventories    Inventory[]
  promotions     PromotionOnSku[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@index([productId, active])
}

model Inventory {
  id        String  @id @default(uuid()) @db.Uuid
  skuId     String  @db.Uuid
  location  String?
  stock     Int     @default(0)
  sku       Sku     @relation(fields: [skuId], references: [id], onDelete: Cascade)
  @@index([skuId, location])
}

model Promotion {
  id          String          @id @default(uuid()) @db.Uuid
  name        String
  startsAt    DateTime
  endsAt      DateTime
  percentOff  Int?
  amountOff   Decimal?        @db.Decimal(12,2)
  currencies  CurrencyCode[]  // enum array (PG)
  active      Boolean         @default(true)
  skus        PromotionOnSku[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model PromotionOnSku {
  skuId       String    @db.Uuid
  promotionId String    @db.Uuid
  sku         Sku       @relation(fields: [skuId], references: [id], onDelete: Cascade)
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  @@id([skuId, promotionId])
  @@map("promotion_on_sku")
}

// -------------------- Interacción ----------------------
model Question {
  id         String    @id @default(uuid()) @db.Uuid
  productId  String    @db.Uuid
  userId     String    @db.Uuid
  content    String
  answered   Boolean   @default(false)
  answer     Answer?
  channel    Channel   @default(WEB)
  createdAt  DateTime  @default(now())
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([productId, createdAt])
}

model Answer {
  id         String    @id @default(uuid()) @db.Uuid
  questionId String    @unique @db.Uuid
  userId     String    @db.Uuid
  content    String
  createdAt  DateTime  @default(now())
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id          String    @id @default(uuid()) @db.Uuid
  orderItemId String    @unique @db.Uuid
  userId      String    @db.Uuid
  productId   String    @db.Uuid
  rating      Int
  title       String?
  comment     String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  @@index([productId, rating])
}

model Favorite {
  userId    String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@id([userId, productId])
}

// -------------------- Carrito & Checkout ---------------
model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String?    @db.Uuid
  channel   Channel    @default(WEB)
  currency  CurrencyCode
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([userId])
}

model CartItem {
  id       String   @id @default(uuid()) @db.Uuid
  cartId   String   @db.Uuid
  skuId    String   @db.Uuid
  qty      Int      @default(1)
  priceAt  Decimal  @db.Decimal(12,2) // precio congelado al momento
  cart     Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  sku      Sku      @relation(fields: [skuId], references: [id])
  @@unique([cartId, skuId])
}

// -------------------- Órdenes, Pagos y Envíos ----------
model Order {
  id           String       @id @default(uuid()) @db.Uuid
  buyerId      String       @db.Uuid
  storeId      String       @db.Uuid
  number       Int
  status       OrderStatus  @default(PENDING)
  currency     CurrencyCode
  items        OrderItem[]
  payments     Payment[]
  shipment     Shipment?
  subtotal     Decimal      @db.Decimal(12,2)
  discount     Decimal      @default(0) @db.Decimal(12,2)
  shippingCost Decimal      @default(0) @db.Decimal(12,2)
  total        Decimal      @db.Decimal(12,2)
  placedAt     DateTime     @default(now())
  buyer        User         @relation("OrderBuyer", fields: [buyerId], references: [id])
  store        Store        @relation(fields: [storeId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  @@index([buyerId, status, placedAt])
  @@index([storeId, number])
  @@unique([storeId, number]) // número único por tienda
  @@map("orders")
}

model OrderItem {
  id             String         @id @default(uuid()) @db.Uuid
  orderId        String         @db.Uuid
  skuId          String         @db.Uuid
  productId      String         @db.Uuid
  title          String
  variant        Json?
  qty            Int
  unitPrice      Decimal        @db.Decimal(12,2)
  lineTotal      Decimal        @db.Decimal(12,2)
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sku            Sku            @relation(fields: [skuId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  reviews        Review[]
  returnRequests ReturnRequest[]
  @@index([orderId])
  @@map("order_items")
}

model Payment {
  id           String        @id @default(uuid()) @db.Uuid
  orderId      String        @db.Uuid
  provider     String
  providerRef  String?       @unique
  status       PaymentStatus @default(PENDING)
  currency     CurrencyCode
  amount       Decimal       @db.Decimal(12,2)
  authorizedAt DateTime?
  paidAt       DateTime?
  failureCode  String?
  rawPayload   Json?
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  @@index([orderId, status])
  @@map("payments")
}

model Shipment {
  id            String     @id @default(uuid()) @db.Uuid
  orderId       String     @unique @db.Uuid
  status        ShipStatus @default(PENDING)
  carrier       String?
  trackingCode  String?    @unique
  shippedAt     DateTime?
  deliveredAt   DateTime?
  fromAddressId String?    @db.Uuid
  toAddressId   String?    @db.Uuid
  fromAddress   Address?   @relation("ShipFrom", fields: [fromAddressId], references: [id])
  toAddress     Address?   @relation("ShipTo", fields: [toAddressId], references: [id])
  order         Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  @@map("shipments")
}

// -------------------- Devoluciones ---------------------
model ReturnRequest {
  id          String       @id @default(uuid()) @db.Uuid
  orderItemId String       @db.Uuid
  status      ReturnStatus @default(REQUESTED)
  reason      String?
  approvedBy  String?      @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  @@index([status, createdAt])
  @@map("return_requests")
}